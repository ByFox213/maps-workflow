name: 'KoG Map Workflow'
description: 'The official KoG maps workflow'

inputs:
  maps:
    description: 'The maps to be tested'
    required: true
    default: "Aip-Gores.map"
  GITHUB_TOKEN:
    type: string
    description: Github token passed from calling workflow
    required: true
  GITHUB_REPOSITORY:
    type: string
    description: Github repository from the from calling workflow
    required: true
  action:
    description: 'Which action to run'
    type: string
    required: false
    default: "check"

outputs:
  status:
    description: 'Returns a markdown string'
    value: ${{ steps.map-workflow-output.outputs.status }}

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Cache the virtualenv
      uses: actions/cache@v4
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/uv.lock') }}

    - name: Install the project
      shell: bash
      run: |
        uv sync --all-extras --dev
      working-directory: ${{ github.action_path }}

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.GITHUB_REPOSITORY }}
        token: ${{ inputs.GITHUB_TOKEN }}

    - name: Get the result
      id: map-workflow-output
      run: |
            IFS=',' read -ra FILES <<< "${{ inputs.maps }}"
            case ${{ inputs.action }} in
              check)
                  for file in "${FILES[@]}"; do
                    if [[ $file == *.map ]]; then
                      uv run maps_workflow/main.py --map ${{ github.workspace }}/$file --ci --action check >> $GITHUB_STEP_SUMMARY
                    fi
                  done
                ;;

              generate_votes)
                uv run maps_workflow/main.py --map ${{ github.workspace }}/$file --action generate_votes
              ;;

              check_if_vote_exists)
                uv run maps_workflow/main.py --mapscsv ${{ github.workspace }}/maps.csv --ci --action check_if_vote_exists
              ;;

              *)
                echo "Invalid action defined!" >> $GITHUB_STEP_SUMMARY
                exit 1;
                ;;
            esac

            {
              echo "status<<EOF"
              echo "$(cat $GITHUB_STEP_SUMMARY)"
              echo "EOF";
            } >> $GITHUB_OUTPUT

            echo $MAPS_WORKFLOW_FAILED
            if [ -v MAPS_WORKFLOW_FAILED ]; then
              exit 1;
            fi
      shell: bash
      working-directory: ${{ github.action_path }}
